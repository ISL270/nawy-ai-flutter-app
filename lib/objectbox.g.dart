// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/features/favorites/data/sources/local/models/area_obx.dart';
import 'app/features/favorites/data/sources/local/models/compound_obx.dart';
import 'app/features/favorites/data/sources/local/models/developer_obx.dart';
import 'app/features/favorites/data/sources/local/models/property_obx.dart';
import 'app/features/favorites/data/sources/local/models/property_type_obx.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 385709898799966196),
    name: 'AreaObx',
    lastPropertyId: const obx_int.IdUid(5, 786309226728330623),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7494404551653198716),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4826899585074583572),
        name: 'areaId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5686032620997359215),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3690536617104919194),
        name: 'slug',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 786309226728330623),
        name: 'translationsJson',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 1800578859065360098),
    name: 'CompoundObx',
    lastPropertyId: const obx_int.IdUid(11, 2916593807981658186),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5474977647186820974),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4400327034356415733),
        name: 'compoundId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6065783399222262879),
        name: 'areaId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8749399785185673097),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2396468467856195413),
        name: 'slug',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3713352332419359136),
        name: 'imagePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4213418846917401642),
        name: 'developerId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4440585002744206523),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6203937424977631753),
        name: 'nawyOrganizationId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2868841719106174083),
        name: 'hasOffers',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 2916593807981658186),
        name: 'isFavorite',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 1563822741974984266),
    name: 'DeveloperObx',
    lastPropertyId: const obx_int.IdUid(5, 2397690774176483940),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4499102341337977836),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 141115414388331530),
        name: 'developerId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5242849466578339180),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 223429372224904860),
        name: 'slug',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2397690774176483940),
        name: 'logoPath',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 5015879385265792106),
    name: 'PropertyObx',
    lastPropertyId: const obx_int.IdUid(18, 3499398948205865491),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 877605877419239719),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3564740531144843671),
        name: 'propertyId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3482253684093055604),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1128677887287445486),
        name: 'slug',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5635561107894403069),
        name: 'image',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1112606745024118138),
        name: 'finishing',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3478631928819866389),
        name: 'minUnitArea',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3985240940453232278),
        name: 'maxUnitArea',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6773387380825622555),
        name: 'minPrice',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 7921733966806460709),
        name: 'maxPrice',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 1260037574462352022),
        name: 'currency',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 1282121291090092116),
        name: 'maxInstallmentYears',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 4058531989543036053),
        name: 'maxInstallmentYearsMonths',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 1418874967072549299),
        name: 'isFavorite',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 4322127885589166235),
        name: 'propertyTypeId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 666525018668184082),
        name: 'areaId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 5209050366541011945),
        name: 'developerId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 3499398948205865491),
        name: 'compoundId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(10, 5497219304216463863),
    name: 'PropertyTypeObx',
    lastPropertyId: const obx_int.IdUid(7, 3856944750627722179),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3883590742748302735),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6359508040648675829),
        name: 'propertyTypeId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1928035545029839356),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1346606413248926463),
        name: 'iconUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5721650943561559384),
        name: 'hasLandArea',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2521576168041459821),
        name: 'hasMandatoryGardenArea',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3856944750627722179),
        name: 'manualRanking',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(10, 5497219304216463863),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [
      4513531827751071559,
      5904952073797304946,
      1954004105564663632,
      5244540976286438636,
      3697197666571454350,
    ],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      7455735873848547757,
      7770799700523750974,
      4631129211154819018,
      2961655832640078482,
      4189999721823647169,
      8263869831553541124,
      1977922953543629213,
      4095418265586287572,
      6456594925887560144,
      733133723616599063,
      4609732866827754089,
      6495621958703298630,
      4009990042617915694,
      2593609636778680501,
      7791000219357915601,
      8950007547865889462,
      452750838791722273,
      4056021333035041578,
      4644619379679215227,
      848380690332826258,
      1661502772985255414,
      622728952630373294,
      4324457547974201878,
      1216617314919338249,
      3074048423509953933,
      2600023534972452133,
      3107599852343195292,
      3941613009144770508,
      7526019070105634031,
      4227885696484278824,
      4735324635540536196,
      5654107811296125599,
      3799056889332788974,
      5911402177203655925,
      4541179277117176838,
      8791517918924587617,
      5629617773359385584,
      8576087874938162102,
      4196582505035615956,
      5574495174322767286,
      8689599467264700184,
      2233971930314032387,
      8689655755994043239,
      1721269297573001869,
      3677285281598897995,
      3019668923507896566,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    AreaObx: obx_int.EntityDefinition<AreaObx>(
      model: _entities[0],
      toOneRelations: (AreaObx object) => [],
      toManyRelations: (AreaObx object) => {},
      getId: (AreaObx object) => object.id,
      setId: (AreaObx object, int id) {
        object.id = id;
      },
      objectToFB: (AreaObx object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final slugOffset = object.slug == null
            ? null
            : fbb.writeString(object.slug!);
        final translationsJsonOffset = object.translationsJson == null
            ? null
            : fbb.writeString(object.translationsJson!);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.areaId);
        fbb.addOffset(2, nameOffset);
        fbb.addOffset(3, slugOffset);
        fbb.addOffset(4, translationsJsonOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = AreaObx()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..areaId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..slug = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 10)
          ..translationsJson = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 12);

        return object;
      },
    ),
    CompoundObx: obx_int.EntityDefinition<CompoundObx>(
      model: _entities[1],
      toOneRelations: (CompoundObx object) => [],
      toManyRelations: (CompoundObx object) => {},
      getId: (CompoundObx object) => object.id,
      setId: (CompoundObx object, int id) {
        object.id = id;
      },
      objectToFB: (CompoundObx object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final slugOffset = object.slug == null
            ? null
            : fbb.writeString(object.slug!);
        final imagePathOffset = object.imagePath == null
            ? null
            : fbb.writeString(object.imagePath!);
        fbb.startTable(12);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.compoundId);
        fbb.addInt64(2, object.areaId);
        fbb.addOffset(3, nameOffset);
        fbb.addOffset(4, slugOffset);
        fbb.addOffset(5, imagePathOffset);
        fbb.addInt64(6, object.developerId);
        fbb.addInt64(7, object.updatedAt?.millisecondsSinceEpoch);
        fbb.addInt64(8, object.nawyOrganizationId);
        fbb.addBool(9, object.hasOffers);
        fbb.addBool(10, object.isFavorite);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final updatedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final object = CompoundObx()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..compoundId = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            6,
            0,
          )
          ..areaId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 10, '')
          ..slug = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 12)
          ..imagePath = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 14)
          ..developerId = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            16,
          )
          ..updatedAt = updatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedAtValue)
          ..nawyOrganizationId = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            20,
          )
          ..hasOffers = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            22,
            false,
          )
          ..isFavorite = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            24,
            false,
          );

        return object;
      },
    ),
    DeveloperObx: obx_int.EntityDefinition<DeveloperObx>(
      model: _entities[2],
      toOneRelations: (DeveloperObx object) => [],
      toManyRelations: (DeveloperObx object) => {},
      getId: (DeveloperObx object) => object.id,
      setId: (DeveloperObx object, int id) {
        object.id = id;
      },
      objectToFB: (DeveloperObx object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final slugOffset = object.slug == null
            ? null
            : fbb.writeString(object.slug!);
        final logoPathOffset = object.logoPath == null
            ? null
            : fbb.writeString(object.logoPath!);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.developerId);
        fbb.addOffset(2, nameOffset);
        fbb.addOffset(3, slugOffset);
        fbb.addOffset(4, logoPathOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = DeveloperObx()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..developerId = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            6,
            0,
          )
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..slug = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 10)
          ..logoPath = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 12);

        return object;
      },
    ),
    PropertyObx: obx_int.EntityDefinition<PropertyObx>(
      model: _entities[3],
      toOneRelations: (PropertyObx object) => [],
      toManyRelations: (PropertyObx object) => {},
      getId: (PropertyObx object) => object.id,
      setId: (PropertyObx object, int id) {
        object.id = id;
      },
      objectToFB: (PropertyObx object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final slugOffset = object.slug == null
            ? null
            : fbb.writeString(object.slug!);
        final imageOffset = object.image == null
            ? null
            : fbb.writeString(object.image!);
        final finishingOffset = object.finishing == null
            ? null
            : fbb.writeString(object.finishing!);
        final currencyOffset = object.currency == null
            ? null
            : fbb.writeString(object.currency!);
        final maxInstallmentYearsMonthsOffset =
            object.maxInstallmentYearsMonths == null
            ? null
            : fbb.writeString(object.maxInstallmentYearsMonths!);
        fbb.startTable(19);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.propertyId);
        fbb.addOffset(2, nameOffset);
        fbb.addOffset(3, slugOffset);
        fbb.addOffset(4, imageOffset);
        fbb.addOffset(5, finishingOffset);
        fbb.addFloat64(6, object.minUnitArea);
        fbb.addFloat64(7, object.maxUnitArea);
        fbb.addFloat64(8, object.minPrice);
        fbb.addFloat64(9, object.maxPrice);
        fbb.addOffset(10, currencyOffset);
        fbb.addInt64(11, object.maxInstallmentYears);
        fbb.addOffset(12, maxInstallmentYearsMonthsOffset);
        fbb.addBool(13, object.isFavorite);
        fbb.addInt64(14, object.propertyTypeId);
        fbb.addInt64(15, object.areaId);
        fbb.addInt64(16, object.developerId);
        fbb.addInt64(17, object.compoundId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = PropertyObx()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..propertyId = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            6,
            0,
          )
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..slug = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 10)
          ..image = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 12)
          ..finishing = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 14)
          ..minUnitArea = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            16,
          )
          ..maxUnitArea = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            18,
          )
          ..minPrice = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            20,
          )
          ..maxPrice = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            22,
          )
          ..currency = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 24)
          ..maxInstallmentYears = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            26,
          )
          ..maxInstallmentYearsMonths = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 28)
          ..isFavorite = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            30,
            false,
          )
          ..propertyTypeId = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            32,
          )
          ..areaId = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            34,
          )
          ..developerId = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            36,
          )
          ..compoundId = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            38,
          );

        return object;
      },
    ),
    PropertyTypeObx: obx_int.EntityDefinition<PropertyTypeObx>(
      model: _entities[4],
      toOneRelations: (PropertyTypeObx object) => [],
      toManyRelations: (PropertyTypeObx object) => {},
      getId: (PropertyTypeObx object) => object.id,
      setId: (PropertyTypeObx object, int id) {
        object.id = id;
      },
      objectToFB: (PropertyTypeObx object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final iconUrlOffset = object.iconUrl == null
            ? null
            : fbb.writeString(object.iconUrl!);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.propertyTypeId);
        fbb.addOffset(2, nameOffset);
        fbb.addOffset(3, iconUrlOffset);
        fbb.addBool(4, object.hasLandArea);
        fbb.addBool(5, object.hasMandatoryGardenArea);
        fbb.addInt64(6, object.manualRanking);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = PropertyTypeObx()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..propertyTypeId = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            6,
            0,
          )
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..iconUrl = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 10)
          ..hasLandArea = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            12,
            false,
          )
          ..hasMandatoryGardenArea = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            14,
            false,
          )
          ..manualRanking = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            16,
          );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AreaObx] entity fields to define ObjectBox queries.
class AreaObx_ {
  /// See [AreaObx.id].
  static final id = obx.QueryIntegerProperty<AreaObx>(
    _entities[0].properties[0],
  );

  /// See [AreaObx.areaId].
  static final areaId = obx.QueryIntegerProperty<AreaObx>(
    _entities[0].properties[1],
  );

  /// See [AreaObx.name].
  static final name = obx.QueryStringProperty<AreaObx>(
    _entities[0].properties[2],
  );

  /// See [AreaObx.slug].
  static final slug = obx.QueryStringProperty<AreaObx>(
    _entities[0].properties[3],
  );

  /// See [AreaObx.translationsJson].
  static final translationsJson = obx.QueryStringProperty<AreaObx>(
    _entities[0].properties[4],
  );
}

/// [CompoundObx] entity fields to define ObjectBox queries.
class CompoundObx_ {
  /// See [CompoundObx.id].
  static final id = obx.QueryIntegerProperty<CompoundObx>(
    _entities[1].properties[0],
  );

  /// See [CompoundObx.compoundId].
  static final compoundId = obx.QueryIntegerProperty<CompoundObx>(
    _entities[1].properties[1],
  );

  /// See [CompoundObx.areaId].
  static final areaId = obx.QueryIntegerProperty<CompoundObx>(
    _entities[1].properties[2],
  );

  /// See [CompoundObx.name].
  static final name = obx.QueryStringProperty<CompoundObx>(
    _entities[1].properties[3],
  );

  /// See [CompoundObx.slug].
  static final slug = obx.QueryStringProperty<CompoundObx>(
    _entities[1].properties[4],
  );

  /// See [CompoundObx.imagePath].
  static final imagePath = obx.QueryStringProperty<CompoundObx>(
    _entities[1].properties[5],
  );

  /// See [CompoundObx.developerId].
  static final developerId = obx.QueryIntegerProperty<CompoundObx>(
    _entities[1].properties[6],
  );

  /// See [CompoundObx.updatedAt].
  static final updatedAt = obx.QueryDateProperty<CompoundObx>(
    _entities[1].properties[7],
  );

  /// See [CompoundObx.nawyOrganizationId].
  static final nawyOrganizationId = obx.QueryIntegerProperty<CompoundObx>(
    _entities[1].properties[8],
  );

  /// See [CompoundObx.hasOffers].
  static final hasOffers = obx.QueryBooleanProperty<CompoundObx>(
    _entities[1].properties[9],
  );

  /// See [CompoundObx.isFavorite].
  static final isFavorite = obx.QueryBooleanProperty<CompoundObx>(
    _entities[1].properties[10],
  );
}

/// [DeveloperObx] entity fields to define ObjectBox queries.
class DeveloperObx_ {
  /// See [DeveloperObx.id].
  static final id = obx.QueryIntegerProperty<DeveloperObx>(
    _entities[2].properties[0],
  );

  /// See [DeveloperObx.developerId].
  static final developerId = obx.QueryIntegerProperty<DeveloperObx>(
    _entities[2].properties[1],
  );

  /// See [DeveloperObx.name].
  static final name = obx.QueryStringProperty<DeveloperObx>(
    _entities[2].properties[2],
  );

  /// See [DeveloperObx.slug].
  static final slug = obx.QueryStringProperty<DeveloperObx>(
    _entities[2].properties[3],
  );

  /// See [DeveloperObx.logoPath].
  static final logoPath = obx.QueryStringProperty<DeveloperObx>(
    _entities[2].properties[4],
  );
}

/// [PropertyObx] entity fields to define ObjectBox queries.
class PropertyObx_ {
  /// See [PropertyObx.id].
  static final id = obx.QueryIntegerProperty<PropertyObx>(
    _entities[3].properties[0],
  );

  /// See [PropertyObx.propertyId].
  static final propertyId = obx.QueryIntegerProperty<PropertyObx>(
    _entities[3].properties[1],
  );

  /// See [PropertyObx.name].
  static final name = obx.QueryStringProperty<PropertyObx>(
    _entities[3].properties[2],
  );

  /// See [PropertyObx.slug].
  static final slug = obx.QueryStringProperty<PropertyObx>(
    _entities[3].properties[3],
  );

  /// See [PropertyObx.image].
  static final image = obx.QueryStringProperty<PropertyObx>(
    _entities[3].properties[4],
  );

  /// See [PropertyObx.finishing].
  static final finishing = obx.QueryStringProperty<PropertyObx>(
    _entities[3].properties[5],
  );

  /// See [PropertyObx.minUnitArea].
  static final minUnitArea = obx.QueryDoubleProperty<PropertyObx>(
    _entities[3].properties[6],
  );

  /// See [PropertyObx.maxUnitArea].
  static final maxUnitArea = obx.QueryDoubleProperty<PropertyObx>(
    _entities[3].properties[7],
  );

  /// See [PropertyObx.minPrice].
  static final minPrice = obx.QueryDoubleProperty<PropertyObx>(
    _entities[3].properties[8],
  );

  /// See [PropertyObx.maxPrice].
  static final maxPrice = obx.QueryDoubleProperty<PropertyObx>(
    _entities[3].properties[9],
  );

  /// See [PropertyObx.currency].
  static final currency = obx.QueryStringProperty<PropertyObx>(
    _entities[3].properties[10],
  );

  /// See [PropertyObx.maxInstallmentYears].
  static final maxInstallmentYears = obx.QueryIntegerProperty<PropertyObx>(
    _entities[3].properties[11],
  );

  /// See [PropertyObx.maxInstallmentYearsMonths].
  static final maxInstallmentYearsMonths = obx.QueryStringProperty<PropertyObx>(
    _entities[3].properties[12],
  );

  /// See [PropertyObx.isFavorite].
  static final isFavorite = obx.QueryBooleanProperty<PropertyObx>(
    _entities[3].properties[13],
  );

  /// See [PropertyObx.propertyTypeId].
  static final propertyTypeId = obx.QueryIntegerProperty<PropertyObx>(
    _entities[3].properties[14],
  );

  /// See [PropertyObx.areaId].
  static final areaId = obx.QueryIntegerProperty<PropertyObx>(
    _entities[3].properties[15],
  );

  /// See [PropertyObx.developerId].
  static final developerId = obx.QueryIntegerProperty<PropertyObx>(
    _entities[3].properties[16],
  );

  /// See [PropertyObx.compoundId].
  static final compoundId = obx.QueryIntegerProperty<PropertyObx>(
    _entities[3].properties[17],
  );
}

/// [PropertyTypeObx] entity fields to define ObjectBox queries.
class PropertyTypeObx_ {
  /// See [PropertyTypeObx.id].
  static final id = obx.QueryIntegerProperty<PropertyTypeObx>(
    _entities[4].properties[0],
  );

  /// See [PropertyTypeObx.propertyTypeId].
  static final propertyTypeId = obx.QueryIntegerProperty<PropertyTypeObx>(
    _entities[4].properties[1],
  );

  /// See [PropertyTypeObx.name].
  static final name = obx.QueryStringProperty<PropertyTypeObx>(
    _entities[4].properties[2],
  );

  /// See [PropertyTypeObx.iconUrl].
  static final iconUrl = obx.QueryStringProperty<PropertyTypeObx>(
    _entities[4].properties[3],
  );

  /// See [PropertyTypeObx.hasLandArea].
  static final hasLandArea = obx.QueryBooleanProperty<PropertyTypeObx>(
    _entities[4].properties[4],
  );

  /// See [PropertyTypeObx.hasMandatoryGardenArea].
  static final hasMandatoryGardenArea =
      obx.QueryBooleanProperty<PropertyTypeObx>(_entities[4].properties[5]);

  /// See [PropertyTypeObx.manualRanking].
  static final manualRanking = obx.QueryIntegerProperty<PropertyTypeObx>(
    _entities[4].properties[6],
  );
}
